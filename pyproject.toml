[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pydoll-mcp"
version = "1.0.0"
description = "PyDoll Browser Automation MCP Server"
readme = "README.md"
license = {file = "LICENSE"}
authors = [{name = "PyDoll MCP Team"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
]
requires-python = ">=3.10"
dependencies = [
    "pydoll-python>=2.8.0",
    "aiohttp>=3.9.5",
    "websockets>=14.0",
    "aiofiles>=23.2.1",
    "typing_extensions>=4.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.1.15",
    "mypy>=1.8.0",
    "black>=24.1.0",
    "pre-commit>=3.6.0",
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
    "pytest-xvfb>=3.0.0",
    "pytest-timeout>=2.3.1",
    "pytest-mock>=3.14.0",
    "responses>=0.25.0",
    "bandit>=1.7.5",
    "safety>=3.0.1",
    "faker>=24.0.0",
]

[project.scripts]
pydoll-mcp = "pydoll_mcp:run_server"

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # assert used (ok in tests)
    "S603",  # subprocess call check
    "S607",  # starting process with partial executable path
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S108", "S311", "S602", "S603", "S607"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.mypy-tests]
disallow_untyped_defs = false

[tool.black]
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601", "B602", "B603", "B607"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true